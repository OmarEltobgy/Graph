#include <stdio.h>
#include <iostream>
#include <string.h>
#include <queue>
using namespace std;

int N, arr[510][510], visited[510][510];
int dx[] = {1, -1, 0, 0};
int dy[] = {0, 0, 1, -1};
int whiteN, dotN;
vector<pair<int, int> > dots;
vector<pair<int, pair<int, int> > > oneDot;
void solve(int x, int y)
{
	queue<pair<int, int> > Q;
	whiteN = 0;
	dots.clear();
	if(visited[x][y] == 0)
	{	
		Q.push(make_pair(x, y));
		visited[x][y] = 1;
		whiteN ++;
	}		
	while(!Q.empty())
	{
		pair<int, int> res = Q.front();
		Q.pop();						
		for(int m=0; m<4; m++)
		{
			if(res.first+dx[m]>=0 && res.first+dx[m]<N && res.second+dy[m]>=0 && res.second+dy[m]<N
							 && visited[res.first+dx[m]][res.second+dy[m]] == 0)
			{									
				if(arr[res.first+dx[m]][res.second+dy[m]] == -1)
				{
					bool flag2 = false;
					for(int i=0; i<dots.size() && !flag2; i++)
					{
						if(dots[i].first == res.first+dx[m] && dots[i].second == res.second+dy[m])
						{
							flag2 = true;
						}
					}
					if(flag2 == false)
					{
						dots.push_back(make_pair(res.first+dx[m], res.second+dy[m]));
					}								
				}
				else if(arr[res.first+dx[m]][res.second+dy[m]] == 1)
				{
					whiteN ++;
					Q.push(make_pair(res.first+dx[m], res.second+dy[m]));
					visited[res.first+dx[m]][res.second+dy[m]] = 1;										
				}								
			}
		}																						
	}
}
int main()
{
	char temp;
	scanf("%d",&N);
	getchar();
	while(N != 0)
	{
		for(int i=0; i<N; i++)
		{
			for(int j=0; j<N; j++)
			{
				scanf("%c",&temp);
				if(temp == '.')
				{
					arr[i][j] = -1;
				}
				if(temp == 'B')
				{
					arr[i][j] = 0;
				}
				if(temp == 'W')
				{
					arr[i][j] = 1;
				}
			}
			getchar();
		}
		memset(visited, 0, sizeof(visited));
		int maxi = 0, maxOneDot = 0;		
		for(int i=0; i<N; i++)
		{
			for(int j=0; j<N; j++)
			{
				if(arr[i][j] == 1)
				{					
					solve(i, j);
					if(dots.size() == 0)
					{
						maxi += whiteN;
					}
					if(dots.size() == 1)
					{
						bool flag = false;
						for(int k=0; k<oneDot.size() && !flag; k++)
						{
							if(oneDot[k].second.first == dots[0].first && oneDot[k].second.second == dots[0].second)
							{
								flag = true;
								oneDot[k].first += whiteN;
								if(oneDot[k].first > maxOneDot)
								{
									maxOneDot = oneDot[k].first;
								}
							}
						}
						if(flag == false)
						{
							oneDot.push_back(make_pair(whiteN, make_pair(dots[0].first, dots[0].second)));
							if(whiteN > maxOneDot)
							{
								maxOneDot = whiteN;
							}
						}
					}
				}
			}
		}
		printf("%d\n", maxi+maxOneDot);		
		scanf("%d",&N);
		getchar();	
		oneDot.clear();
	}
	
}
